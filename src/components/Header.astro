---
import { SITE_TITLE } from '../consts';
---

<header class="sticky top-0 z-50 bg-white/90 backdrop-blur-md shadow-[0_10px_30px_rgba(0,10,21,0.08)]">
	<div class="mx-auto flex max-w-[1180px] items-center justify-between px-5 py-4 md:px-6">
		<a class="block" href="/">
			<span class="font-display text-lg uppercase tracking-[0.4em] text-brand-text md:text-xl">{SITE_TITLE}</span>
		</a>
		<button
			class="flex h-12 w-12 items-center justify-center rounded-full border border-brand-text/30 text-brand-text transition-colors duration-300 md:hidden"
			aria-expanded="false"
			aria-controls="primary-navigation"
			data-menu-toggle
		>
			<span class="sr-only">メニューを開く</span>
			<div class="flex flex-col gap-1.5">
				<span class="block h-0.5 w-6 bg-current transition-transform duration-300" data-bar="top"></span>
				<span class="block h-0.5 w-6 bg-current transition-opacity duration-300" data-bar="middle"></span>
				<span class="block h-0.5 w-6 bg-current transition-transform duration-300" data-bar="bottom"></span>
			</div>
		</button>
		<nav
			id="primary-navigation"
			aria-label="主要ナビゲーション"
			data-primary-nav
			class="fixed inset-y-0 right-0 flex w-[80vw] max-w-xs translate-x-full flex-col justify-start gap-10 bg-white/95 px-10 py-32 shadow-[-20px_0_40px_rgba(0,10,21,0.12)] transition-transform duration-300 md:static md:w-auto md:translate-x-0 md:flex-row md:items-center md:bg-transparent md:p-0 md:shadow-none"
		>
			<ul class="flex flex-col gap-6 md:flex-row md:items-center md:gap-7">
				{[
					{ label: 'HOME', href: '/' },
					{ label: 'INFORMATION', href: '/#information' },
					{ label: 'PROGRAMMING', href: '/#programming' },
					{ label: 'TELEWORK', href: '/#telework' },
					{ label: 'SKILLS', href: '/#skills' },
					{ label: 'BLOG', href: '/blog' },
					{ label: 'ABOUT', href: '/about' },
				].map((item) => (
					<li>
						<a
							href={item.href}
							class="relative block font-display text-sm uppercase tracking-[0.4em] text-brand-text transition-colors duration-300 after:absolute after:-bottom-2 after:left-0 after:h-0.5 after:w-full after:origin-left after:scale-x-0 after:bg-brand-text after:transition-transform after:duration-300 after:content-[''] hover:after:scale-x-100 md:text-xs"
						>
							{item.label}
						</a>
					</li>
				))}
			</ul>
		</nav>
	</div>
</header>

<script>
	const toggle = document.querySelector('[data-menu-toggle]');
	const nav = document.querySelector('[data-primary-nav]');
	const topBar = toggle?.querySelector('[data-bar="top"]');
	const middleBar = toggle?.querySelector('[data-bar="middle"]');
	const bottomBar = toggle?.querySelector('[data-bar="bottom"]');

	const closeNav = () => {
		if (!toggle || !nav) return;
		nav.classList.add('translate-x-full');
		nav.classList.remove('translate-x-0');
		toggle.setAttribute('aria-expanded', 'false');
		document.body.classList.remove('overflow-hidden');
		topBar?.classList.remove('translate-y-2', 'rotate-45');
		middleBar?.classList.remove('opacity-0');
		bottomBar?.classList.remove('-translate-y-2', '-rotate-45');
	};

	if (toggle && nav) {
		toggle.addEventListener('click', () => {
			const isOpen = nav.classList.toggle('translate-x-0');
			nav.classList.toggle('translate-x-full', !isOpen);
			toggle.setAttribute('aria-expanded', String(isOpen));
			document.body.classList.toggle('overflow-hidden', isOpen);

			topBar?.classList.toggle('translate-y-2', isOpen);
			topBar?.classList.toggle('rotate-45', isOpen);
			middleBar?.classList.toggle('opacity-0', isOpen);
			bottomBar?.classList.toggle('-translate-y-2', isOpen);
			bottomBar?.classList.toggle('-rotate-45', isOpen);
		});

		nav.addEventListener('click', (event) => {
			if (event.target instanceof Element && event.target.matches('a')) {
				closeNav();
			}
		});

		window.addEventListener('resize', () => {
			if (window.innerWidth >= 768) {
				closeNav();
			}
		});
	}
</script>
